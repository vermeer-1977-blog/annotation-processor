import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * Generated by ClassFactoryProcessor.
 * @see org.vermeer1977.infrastructure.annotation.processor.ClassFactoryProcessor
 * @see org.vermeer1977.infrastructure.annotation.processor.resource
 */
enum Message4 {
  /**
   * デフォルト331<br>
   * parameter count = 0
   */
  MSG441("msg441", 0, "デフォルト331"),

  /**
   * デフォルト332{0}and{1}<br>
   * parameter count = 2
   */
  MSG442("msg442", 2, "デフォルト332{0}and{1}");

  private static ResourceBundle.Control control;

  private static Locale locale;

  private final String key;

  private final Integer paramCount;

  private final String value;

  private Message4(String key, Integer paramCount, String value) {
    this.key = key;
    this.paramCount = paramCount;
    this.value = value;
  }

  /**
   * 任意設定項目：ResourceBundleから値を取得する際に使用するControlを設定します.<br>
   * 未設定の場合、ResourceBundleのデフォルトで処理します.<br>
   * 本設定はロケールのFallbackを設定したい場合などに使用します.<br>Caution:this feild is Thread-Unsafe.
   *
   */
  public static void setControl(ResourceBundle.Control control) {
    Message4.control = control;
  }

  /**
   * 任意設定項目：ResourceBundleから値を取得する際に使用するLocaleを設定します.<br>
   * 未設定の場合、デフォルトロケールで処理します.<br>
   * Caution:this feild is Thread-Unsafe.
   *
   */
  public static void setLocale(Locale locale) {
    Message4.locale = locale;
  }

  /**
   * リソースの値を返却します.<br>
   * 例外捕捉時の対応については、リソースの取得が出来なかった場合に最低限状況判別が出来うるメッセージを表示させるための措置です.<br>
   * あわせてメッセージIDを付与してリソースの取得が出来ていなかったことを可視できるようにしています.<br>
   * @return 当該定数に該当するリソースの値
   */
  @Override
  public String toString() {
    try {
      java.util.Locale _locale = Message4.locale == null ? java.util.Locale.getDefault() : Message4.locale;
      if (Message4.control == null) {
        return java.util.ResourceBundle.getBundle("resource.message4", _locale).getString(this.key);
      }
      return java.util.ResourceBundle.getBundle("resource.message4", _locale, Message4.control).getString(this.key);
    } catch(Exception ex) {
      return this.value;
    }
  }

  /**
   * 埋め込み文字の置換をした文字列を返却します.<br>
   * @return 埋め込み文字を置換した文字列
   */
  public String format(Object... params) {
    return java.text.MessageFormat.format(toString(), params);
  }
}
